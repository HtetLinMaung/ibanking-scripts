"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const axios_1 = __importDefault(require("axios"));
const timeout = (ms) => new Promise((resolve) => setTimeout(resolve, ms));
const get = (url, config) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        const response = yield axios_1.default.get(url, config);
        return [response, null];
    }
    catch (err) {
        if ("response" in err) {
            return [err.response, null];
        }
        return [null, err];
    }
});
const post = (url, data, config) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        const response = yield axios_1.default.post(url, data, config);
        return [response, null];
    }
    catch (err) {
        if ("response" in err) {
            return [err.response, null];
        }
        return [null, err];
    }
});
const put = (url, data, config) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        const response = yield axios_1.default.put(url, data, config);
        return [response, null];
    }
    catch (err) {
        if ("response" in err) {
            return [err.response, null];
        }
        return [null, err];
    }
});
const destroy = (url, config) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        const response = yield axios_1.default.delete(url, config);
        return [response, null];
    }
    catch (err) {
        if ("response" in err) {
            return [err.response, null];
        }
        return [null, err];
    }
});
const patch = (url, data, config) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        const response = yield axios_1.default.patch(url, data, config);
        return [response, null];
    }
    catch (err) {
        if ("response" in err) {
            return [err.response, null];
        }
        return [null, err];
    }
});
exports.default = {
    get: (url, config, options = {}) => __awaiter(void 0, void 0, void 0, function* () {
        const defaultOptions = Object.assign({ retry: 0, retryDelay: 0, interval: 0, requestUntil: (res, err) => true, retryWhen: (res, err) => !res || res.status >= 400 }, options);
        let response = null;
        let err = null;
        if (defaultOptions.interval > 0) {
            [response, err] = yield (() => new Promise((resolve, reject) => {
                const intervalId = setInterval(() => {
                    get(url, config)
                        .then(([res, err]) => {
                        if (defaultOptions.requestUntil(res, err)) {
                            resolve([res, err]);
                            clearInterval(intervalId);
                        }
                    })
                        .catch(reject);
                }, defaultOptions.interval);
            }))();
        }
        else {
            [response, err] = yield get(url, config);
        }
        let i = 0;
        while (defaultOptions.retryWhen(response, err) &&
            i < defaultOptions.retry) {
            if (defaultOptions.retryDelay > 0) {
                yield timeout(defaultOptions.retryDelay);
            }
            [response, err] = yield get(url, config);
            i++;
        }
        return [response, err];
    }),
    post: (url, data, config, options = {}) => __awaiter(void 0, void 0, void 0, function* () {
        const defaultOptions = Object.assign({ retry: 0, retryDelay: 0, interval: 0, requestUntil: (res, err) => true, retryWhen: (res, err) => !res || res.status >= 400 }, options);
        let response = null;
        let err = null;
        if (defaultOptions.interval > 0) {
            [response, err] = yield (() => new Promise((resolve, reject) => {
                const intervalId = setInterval(() => {
                    post(url, data, config)
                        .then(([res, err]) => {
                        if (defaultOptions.requestUntil(res, err)) {
                            resolve([res, err]);
                            clearInterval(intervalId);
                        }
                    })
                        .catch(reject);
                }, defaultOptions.interval);
            }))();
        }
        else {
            [response, err] = yield post(url, data, config);
        }
        let i = 0;
        while (defaultOptions.retryWhen(response, err) &&
            i < defaultOptions.retry) {
            if (defaultOptions.retryDelay > 0) {
                yield timeout(defaultOptions.retryDelay);
            }
            [response, err] = yield post(url, data, config);
            i++;
        }
        return [response, err];
    }),
    put: (url, data, config, options = {}) => __awaiter(void 0, void 0, void 0, function* () {
        const defaultOptions = Object.assign({ retry: 0, retryDelay: 0, interval: 0, requestUntil: (res, err) => true, retryWhen: (res, err) => !res || res.status >= 400 }, options);
        let response = null;
        let err = null;
        if (defaultOptions.interval > 0) {
            [response, err] = yield (() => new Promise((resolve, reject) => {
                const intervalId = setInterval(() => {
                    put(url, data, config)
                        .then(([res, err]) => {
                        if (defaultOptions.requestUntil(res, err)) {
                            resolve([res, err]);
                            clearInterval(intervalId);
                        }
                    })
                        .catch(reject);
                }, defaultOptions.interval);
            }))();
        }
        else {
            [response, err] = yield put(url, data, config);
        }
        let i = 0;
        while (defaultOptions.retryWhen(response, err) &&
            i < defaultOptions.retry) {
            if (defaultOptions.retryDelay > 0) {
                yield timeout(defaultOptions.retryDelay);
            }
            [response, err] = yield put(url, data, config);
            i++;
        }
        return [response, err];
    }),
    patch: (url, data, config, options = {}) => __awaiter(void 0, void 0, void 0, function* () {
        const defaultOptions = Object.assign({ retry: 0, retryDelay: 0, interval: 0, requestUntil: (res, err) => true, retryWhen: (res, err) => !res || res.status >= 400 }, options);
        let response = null;
        let err = null;
        if (defaultOptions.interval > 0) {
            [response, err] = yield (() => new Promise((resolve, reject) => {
                const intervalId = setInterval(() => {
                    patch(url, data, config)
                        .then(([res, err]) => {
                        if (defaultOptions.requestUntil(res, err)) {
                            resolve([res, err]);
                            clearInterval(intervalId);
                        }
                    })
                        .catch(reject);
                }, defaultOptions.interval);
            }))();
        }
        else {
            [response, err] = yield patch(url, data, config);
        }
        let i = 0;
        while (defaultOptions.retryWhen(response, err) &&
            i < defaultOptions.retry) {
            if (defaultOptions.retryDelay > 0) {
                yield timeout(defaultOptions.retryDelay);
            }
            [response, err] = yield patch(url, data, config);
            i++;
        }
        return [response, err];
    }),
    delete: (url, config, options = {}) => __awaiter(void 0, void 0, void 0, function* () {
        const defaultOptions = Object.assign({ retry: 0, retryDelay: 0, interval: 0, requestUntil: (res, err) => true, retryWhen: (res, err) => !res || res.status >= 400 }, options);
        let response = null;
        let err = null;
        if (defaultOptions.interval > 0) {
            [response, err] = yield (() => new Promise((resolve, reject) => {
                const intervalId = setInterval(() => {
                    destroy(url, config)
                        .then(([res, err]) => {
                        if (defaultOptions.requestUntil(res, err)) {
                            resolve([res, err]);
                            clearInterval(intervalId);
                        }
                    })
                        .catch(reject);
                }, defaultOptions.interval);
            }))();
        }
        else {
            [response, err] = yield destroy(url, config);
        }
        let i = 0;
        while (defaultOptions.retryWhen(response, err) &&
            i < defaultOptions.retry) {
            if (defaultOptions.retryDelay > 0) {
                yield timeout(defaultOptions.retryDelay);
            }
            [response, err] = yield destroy(url, config);
            i++;
        }
        return [response, err];
    }),
};
